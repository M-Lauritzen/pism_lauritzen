FROM ubuntu:20.04
ENV DEBIAN_FRONTEND=noninteractive

# Install required packages listed in the manual. This is done separately so that we can
# re-use this fs layer.
RUN apt-get update && apt-get install -y ${PISM_DEBIAN_PACKAGE_LIST}

# Install tools:
# - ccache and lld to speed up builds,
# - PIP to install Sphinx
# - Cython to build PETSc
# - wget to download sources of I/O libraries
# - NumPy is used by petsc4py and PISM's scripts
# - SciPy is used by at least one regression test
# - python-netcdf4 is use by many regression tests
# - NCO is used by many regression tests
# - PROJ is used by PISM's code computing lon,lat coordinates
# - python3-dev is needed to build Python bindings
# - python3-nose is used to run some regression tests
# - SWIG is needed to build Python bindings
RUN apt-get update && apt-get install -y \
        m4 \
        ccache \
        clang \
        cython3 \
        libproj-dev \
        lld \
        nco \
        python3-dev \
        python3-pip \
        python3-netcdf4 \
        python3-nose \
        python3-numpy \
        python3-scipy \
        swig \
        wget

# Ubuntu 20.04 provides a very old Sphinx version (v1.8.5) so we have to install a newer
# one using PIP.
RUN pip3 install -U sphinx sphinxcontrib-bibtex

# Install MPICH
RUN apt-get update && apt-get install -y \
        libmpich-dev

RUN useradd --create-home --system --shell=/bin/false builder && usermod --lock builder
USER builder

# Install parallel HDF5, NetCDF, PnetCDF, and ParallelIO by building them from sources.
#
# Uses wget installed above.
#
# This step uses scripts that are used to describe how to install these libraries in the
# manual. Re-using them here makes it easier to keep this part of the manual up to date.

COPY hdf5.sh /tmp/
COPY netcdf.sh /tmp/
COPY pnetcdf.sh /tmp/
COPY parallelio.sh /tmp/

RUN cd /tmp && \
        ./hdf5.sh && \
        ./netcdf.sh && \
        ./pnetcdf.sh && \
        ./parallelio.sh && \
        rm -rf ~/local/build

# Build PETSc last to make it easier to update this Docker image.
COPY petsc.sh /tmp/
RUN cd /tmp && \
        ./petsc.sh && \
        rm -rf ~/local/build

ENV PETSC_DIR="/home/builder/local/petsc" \
    PYTHONPATH="/home/builder/local/petsc/lib"
